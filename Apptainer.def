 
Bootstrap: docker
From: python:3.9.2


%environment
    export Author="Vivek Katial"
    export LC_ALL=C
    export PATH=/usr/games:$PATH

    # Declare experiment environment variables
    MLFLOW_TRACKING_URI=http://45.113.235.194:5000/
    # Declare mlflow environment variables
    MLFLOW_S3_ENDPOINT_URL=https://objects.storage.unimelb.edu.au
    MLFLOW_PYTHON_BIN=/usr/local/bin/python
    MLFLOW_BIN=/usr/local/bin/mlflow
    S3_BUCKET=s3://vrp-qaoa

    # Poetry Environment Variables
    PYTHONFAULTHANDLER=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    PIP_NO_CACHE_DIR=off \
    PIP_DISABLE_PIP_VERSION_CHECK=on \
    PIP_DEFAULT_TIMEOUT=100

    # Export env vars for LC_ALL
    export LC_ALL=en_US.UTF-8
    export LANG=en_US.UTF-8
    # Export env vars
    export EXPERIMENT_NAME \
      MLFLOW_TRACKING_URI \
      MLFLOW_S3_ENDPOINT_URL \
      MLFLOW_PYTHON_BIN \
      MLFLOW_BIN \
      S3_BUCKET

%post
  # Print image info
  cat /etc/os-release

  # Software versions
  # Get dependencies
  apt-get update && apt-get install -y gnupg2
  apt-key update
  apt-get install -y --no-install-recommends \
    locales \
    ca-certificates \
    gcc

  # Configure default locale
  echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen
  locale-gen en_US.utf8
  /usr/sbin/update-locale LANG=en_US.UTF-8
  export LC_ALL=en_US.UTF-8
  export LANG=en_US.UTF-8
  export POETRY_VERSION=1.7.1

  ####################################################
  # Python / QISKit Installation
  ####################################################
  pip install --upgrade pip
  git clone https://github.com/vivekkatial/HAQC.git
  pip install "poetry==$POETRY_VERSION"
  cd /HAQC
  cat pyproject.toml
  poetry config virtualenvs.create false && poetry install --no-interaction --no-ansi


  ####################################################
  # AWS Installation
  ####################################################
  apt-get update
  apt-get install -y --no-install-recommends --allow-unauthenticated \
    awscli

####################################################
# APP TO RUN QAOA INSTANCE SIZE PARAMETER CONC
####################################################
%apphelp run_qaoa_maxcut_params_conc
  This is the help running MAXCUT instances on QAOA to investigate parameter concentration

%applabels run_qaoa_maxcut_params_conc
  APP_NAME QAOA_MAXCUT_PARAM_CONC

%apprun run_qaoa_maxcut_params_conc
    # Check if exactly three arguments are provided
    if [ "$#" -ne 3 ]; then
        echo "Error: Exactly three arguments required: node_size, graph_type, n_layers"
        echo "Usage: run_qaoa_maxcut_params_conc <node_size> <graph_type> <n_layers>"
        exit 1
    fi

    node_size="$1"
    graph_type="$2"
    n_layers="$3"

    # Echoing arguments for confirmation
    echo "Running experiment with the following parameters:"
    echo "Node Size: $node_size"
    echo "Graph Type: $graph_type"
    echo "Number of Layers: $n_layers"

    # Execute the Python script with provided arguments
    python run_maxcut_parameter_initialisation.py -T True -G "$graph_type" -n "$node_size" -l "$n_layers"


####################################################
# APP TO RUN QAOA OPTIMIZERS
####################################################
%apphelp run_qaoa_maxcut_classical_optimisers

%applabels run_qaoa_maxcut_optimizers
  APP_NAME QAOA_MAXCUT_OPTIMIZERS

%apprun run_qaoa_maxcut_classical_optimisers
  # Check if exactly three arguments are provided
  if [ "$#" -ne 4 ]; then
      echo "Error: Exactly four arguments required: node_size, graph_type, n_layers, max_feval"
      echo "Usage: run_qaoa_maxcut_classical_optimisers <node_size> <graph_type> <n_layers> <max_feval>"
      exit 1
  fi

  node_size="$1"
  graph_type="$2"
  n_layers="$3"
  max_feval="$4"

  # Echoing arguments for confirmation
  echo "Running experiment with the following parameters:"
  echo "Node Size: $node_size"
  echo "Graph Type: $graph_type"
  echo "Number of Layers: $n_layers"
  echo "Maximum Number of : $max_feval"

  # Execute the Python script with provided arguments
  python run_maxcut_classical_optimizer_comparison.py -T True -G "$graph_type" -n "$node_size" -l "$n_layers" -f "$max_feval"

####################################################
# APP TO RUN QAOA N Layers
####################################################
%apphelp run_qaoa_maxcut_n_layers

%applabels run_qaoa_maxcut_n_layers
  APP_NAME QAOA_MAXCUT_OPTIMIZERS

%apprun run_qaoa_maxcut_n_layers
  # Check if exactly three arguments are provided
  if [ "$#" -ne 4 ]; then
      echo "Error: Exactly four arguments required: node_size, graph_type, n_layers, max_feval"
      echo "Usage: run_qaoa_maxcut_n_layers <node_size> <graph_type> <n_layers> <max_feval>"
      exit 1
  fi

  node_size="$1"
  graph_type="$2"
  n_layers="$3"
  max_feval="$4"

  # Echoing arguments for confirmation
  echo "Running experiment with the following parameters:"
  echo "Node Size: $node_size"
  echo "Graph Type: $graph_type"
  echo "Number of Layers: $n_layers"
  echo "Maximum Number of : $max_feval"

  # Execute the Python script with provided arguments
  python run_qaoa_maxcut_n_layers.py -T True -G "$graph_type" -n "$node_size" -l "$n_layers" -f "$max_feval"


%runscript
  poetry shell
  echo "Container was created $NOW"
  echo "Run one of the built apps. You're not running anything!"

%labels
    Author Vivek Katial
